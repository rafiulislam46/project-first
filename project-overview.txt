============================
AI PRODUCT STUDIO — FULL PROJECT REPORT
Generated by Cosine Analyzer
Date: 2025-10-19T00:00:00Z
============================

[1] PROJECT METADATA
- Framework: Next.js 14.2.4 (App Router)
- Runtime: Node.js for most routes; explicit edge-safe middleware; select APIs marked dynamic="force-dynamic"
- Language: TypeScript (strict), React 18.3.1
- Package manager: npm (scripts and CI use npm); no pnpm/yarn configs present
- TypeScript usage: Yes (tsconfig.json, .ts/.tsx across app/lib/components)
- UI stack:
  - Tailwind CSS 3.4.4 + tailwindcss-animate
  - shadcn/ui-style patterns (cva + radix Slot; custom Button)
  - Framer Motion 11.0.0 (MotionProvider, page transitions)
- External APIs/SDKs:
  - Cloudinary (unsigned upload via public preset; optional signed server config)
  - Supabase (@supabase/ssr, @supabase/supabase-js, @supabase/auth-helpers-nextjs) optional
  - Google Gemini (@google/generative-ai) for ad prompt variants and image generation in test flow
  - Replicate (Virtual Try-On idm-vton)
  - Hugging Face Inference API (optional fallback for Try-On)
  - SSLCommerz (payment initiation + IPN handlers)
- Deployment:
  - Vercel (vercel.json present; Next.js build output and env configured there)
  - GitHub Actions CI (build-only workflow with Node 18)
- Env variables used (from .env.example and code):
  - MODE, NEXT_PUBLIC_MODE
  - PLAN, NEXT_PUBLIC_PLAN
  - APP_BASE_URL, NEXT_PUBLIC_BASE_URL (in some SSLCommerz handlers)
  - NEXT_PUBLIC_SUPABASE_URL, SUPABASE_URL
  - NEXT_PUBLIC_SUPABASE_ANON_KEY, SUPABASE_ANON_KEY
  - NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME, CLOUDINARY_CLOUD_NAME
  - NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET, CLOUDINARY_UPLOAD_PRESET
  - CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET
  - GEMINI_API_KEY (lib/gemini.ts) and GOOGLE_API_KEY (api/test-generate)
  - REPLICATE_API_TOKEN, REPLICATE_MODEL_VERSION (or REPLICATE_IDM_VTON_VERSION in generator route)
  - HF_TOKEN, HF_TRYON_MODEL
  - ASSET_MANIFEST_URL, NEXT_PUBLIC_ASSET_MANIFEST_URL
  - SSLCZ_STORE_ID, SSLCZ_STORE_PASSWD, SSLCZ_MODE, SSLC_SANDBOX
  - Middleware-specific: API_KEY, API_KEYS, RATE_LIMIT_PER_MIN
  - Feature flags: UPLOAD_TO_CLOUDINARY, SAVE_TO_SUPABASE (used in tryon provider flow)

[2] FOLDER STRUCTURE
- Root files:
  - .env.example — example environment configuration
  - .eslintrc.json — ESLint configuration (Next.js config, tailwind plugin listed in devDependencies)
  - .prettierrc — Prettier config
  - README.md — detailed project overview and instructions
  - next.config.mjs — Next.js configuration (images remote patterns, typedRoutes, strict mode, eslint ignoreDuringBuilds)
  - package.json — scripts and dependencies
  - postcss.config.js — Tailwind + autoprefixer
  - tailwind.config.ts — theme/customizations
  - tsconfig.json — TS strict config; path alias @/*
  - vercel.json — Vercel deployment config with NEXT_PUBLIC_CLOUDINARY_* envs
  - next-env.d.ts — Next.js TS types
  - .gitignore — standard git ignores
  - .github/workflows/ci.yml — CI workflow: npm install/build on pushes/PRs

- /public (static assets):
  - /brand — payment badges: bkash.svg, card.svg, nagad.svg, rocket.svg
  - /catalog
    - /models — M01.svg, M02.svg, model_card.svg
    - /templates — T01.svg, template_card.svg
  - /data — models.json, styles.json, templates.json
  - /demo
    - /tryon — 1.svg..5.svg (demo results)
    - /template — 1.svg..2.svg (demo results)
  - Purpose: Local placeholders and data; can be overridden via ASSET_MANIFEST_URL at runtime

- /sql (DB setup for Supabase/Postgres):
  - 000_init.sql — profiles, assets, catalog tables, RLS policies, RPC use_one_credit
  - 001_images.sql — images table + RLS
  - 002_catalog_policies.sql — public read policies for catalog tables
  - seed.sql — example upserts for catalog_models and catalog_templates

- /src
  - /app (Next.js App Router)
    - about/page.tsx
    - admin/
      - layout.tsx — admin access wrapper with role check
      - page.tsx — redirect to /admin/dashboard
      - dashboard/page.tsx — mock dashboard with charts and stats
      - images/page.tsx
      - payments/page.tsx
      - settings/page.tsx
      - templates/page.tsx
      - users/page.tsx
      - ui/admin-nav.tsx — admin sidebar navigation
    - ai-tool/page.tsx
    - api/ (see section [3] for details)
      - _middleware-utils.ts — edge-safe auth/rate-limit helpers
      - _utils.ts — shared API helpers + simple JSON datastore
      - assets/[id]/route.ts
      - assets/route.ts
      - copy/route.ts
      - generate/route.ts
      - generator/route.ts
      - models/[id]/route.ts
      - models/route.ts
      - pay/sslcommerz/{create,success,fail,cancel}/route.ts
      - payments/sslcommerz/{initiate,ipn}/route.ts
      - products/[id]/route.ts
      - products/route.ts
      - template/route.ts (present in tree; content not retrieved in detail)
      - templates/[id]/route.ts
      - templates/route.ts
      - test-generate/route.ts
      - tryon/{mocks.ts,provider.ts,route.ts}
      - upload/route.ts
    - components/page.tsx — sample components page
    - dashboard/page.tsx
    - generator/page.tsx — virtual try-on generator UI (client)
    - globals.css — theme tokens, component styles
    - layout.tsx — root layout: Navbar, Footer, BottomNav, ThemeProvider, MotionProvider, AuthProvider, PageTransition
    - models/page.tsx
    - page.tsx — landing page
    - pricing/page.tsx
    - privacy/page.tsx
    - result/page.tsx
    - select/page.tsx
    - signin/{page.tsx, SignInForm.tsx}
    - signup/page.tsx
    - templates/page.tsx
    - terms/page.tsx
    - test-generate/page.tsx
    - test-prompts/page.tsx — product ads generator (client) using Gemini + Cloudinary
    - tryon/page.tsx — virtual try-on UI (client)
    - upload/page.tsx
  - /components
    - layout/{navbar.tsx, footer.tsx, bottom-nav.tsx, left-sidebar.tsx, sidebar.tsx}
    - ui/{button.tsx, search-bar.tsx}
    - ModeToggle.tsx, ModelPicker.tsx, ModelsList.tsx, TemplatePicker.tsx, gradient-carousel.tsx
    - theme-provider.tsx, motion-provider.tsx, page-transition.tsx
  - /lib
    - AuthProvider.tsx — app auth context
    - cloudinary.ts — NEXT_PUBLIC_* config + hasCloudinary helper
    - config.ts — MODE/PLAN/manifest/Supabase flags
    - credits.ts — plan/credits helpers (not inspected in full)
    - gemini.ts — server-safe Gemini client + generateAdVariants
    - store.ts — client state store (not inspected in full)
    - supabase-{server,client,browser}.ts — SSR/shell adapters
    - supabase.ts, supabaseClient.ts — legacy/alternate clients
    - utils.ts — cn, motion variants, manifest overrides, localStorage selection
  - middleware.ts — global matcher for /api/* (rate-limit, optional API key auth, gated pages behind Supabase)

- File type counts (approximate):
  - .tsx: ~35–45
  - .ts: ~25–35
  - .json: ~6–8
  - .css: 1
  - .mjs: 1
  - .js: 1
  - .sql: 4
  - .svg: ~15–20
  - .md: 1
  - CI YAML: 1

[3] API ROUTES
Note: All routes are under /src/app/api; App Router file name “route.ts” indicates HTTP methods.

- /api/generate
  - Methods: POST
  - Purpose: Upload a File (multipart/form-data) to Cloudinary via unsigned preset. Returns { url }.
  - Dependencies: Cloudinary (NEXT_PUBLIC_CLOUDINARY_*), lib/cloudinary
  - Runtime: default (nodejs)

- /api/generator
  - Methods: POST, GET
  - POST: Dual-mode. If multipart with "file", uploads to Cloudinary and returns { url }. Else expects { human_img, garm_img }, proxies to Replicate predictions with idm-vton version.
  - GET: Polls a prediction by id against Replicate to keep token server-side.
  - Dependencies: Cloudinary (unsigned), Replicate (REPLICATE_API_TOKEN, version)
  - Runtime: default (nodejs)

- /api/tryon
  - Methods: POST
  - POST: Two paths:
    - If both { human_img, garm_img } present: call Replicate (Token scheme), poll until completion, return { images: [url] }.
    - Else: fall back to internal try-on provider pipeline (mock or live styles), optionally upload/save assets.
  - Dependencies: Replicate (REPLICATE_API_TOKEN), Cloudinary (optional upload), Supabase (optional save), lib/tryon/provider
  - runtime: nodejs (export const runtime = "nodejs")
  - dynamic: "force-dynamic"

- /api/upload
  - Methods: POST
  - Purpose: Accepts either "file" or "base64" form fields; uploads to Cloudinary unsigned endpoint; returns { secure_url }.
  - Dependencies: Cloudinary (CLOUDINARY_CLOUD_NAME/UPLOAD_PRESET or NEXT_PUBLIC_*)
  - Runtime: default (nodejs)

- /api/test-generate
  - Methods: POST
  - Purpose: Test flow to have Gemini generate image outputs from product images and prompt/templates. Expects URLs (Cloudinary) and uploads generated base64 images back to Cloudinary; returns { urls }.
  - Dependencies: Google Generative Language API (Gemini 2.5 Flash) via GOOGLE_API_KEY, Cloudinary
  - Runtime: default (nodejs)

- /api/copy
  - Methods: POST
  - Purpose: Mock copywriting: returns title/description/hashtags from { productName, context } or default set.
  - Dependencies: none external
  - Runtime: default (nodejs)

- /api/templates
  - Methods: GET, POST
  - GET: Reads catalog_templates (Supabase) and returns { items } with refUrl normalization.
  - POST: Upsert a template (Supabase) or no-op echo when Supabase not configured.
  - Dependencies: Supabase (optional)
  - Runtime: default (nodejs)

- /api/templates/[id]
  - Methods: GET, PATCH, DELETE
  - Purpose: CRUD operations over simple JSON datastore when Supabase is not used (via _utils db).
  - Dependencies: local JSON store (".data"), NextResponse helpers
  - Runtime: default (nodejs)

- /api/products
  - Methods: GET, POST
  - GET: List products from local JSON store.
  - POST: Either JSON create with imageUrl or multipart upload to Cloudinary then create; returns created product.
  - Dependencies: Cloudinary (unsigned), local JSON store
  - Runtime: default (nodejs)

- /api/products/[id]
  - Methods: GET, PATCH, DELETE
  - Purpose: Read/update/delete product; DELETE attempts to unlink /public/uploads files if applicable.
  - Dependencies: local JSON store; Node fs/path
  - Runtime: default (nodejs)

- /api/models
  - Methods: GET, POST
  - GET: Reads catalog_models (Supabase) and returns { items }.
  - POST: Upsert into catalog_models (Supabase) or returns mock echo.
  - Dependencies: Supabase (optional)
  - Runtime: default (nodejs)

- /api/assets
  - Methods: GET, POST
  - GET: Lists user assets when Supabase configured and session exists; otherwise empty list.
  - POST: Inserts asset row (Supabase) or returns local echo item.
  - Dependencies: Supabase (optional)
  - Runtime: default (nodejs)
  - dynamic: "force-dynamic"

- /api/assets/[id]
  - Methods: DELETE
  - Purpose: Delete asset for current user (Supabase) or return { ok: true } in mock.
  - Dependencies: Supabase (optional)
  - Runtime: default (nodejs)
  - dynamic: "force-dynamic"

- /api/pay/sslcommerz/create
  - Methods: POST
  - Purpose: Create checkout session with SSLCommerz API; returns gateway URLs and session info.
  - Dependencies: SSLCommerz; env SSL_STORE_ID/SSL_STORE_PASS and NEXT_PUBLIC_BASE_URL/BASE_URL
  - Runtime: default (nodejs)

- /api/pay/sslcommerz/success | /fail | /cancel
  - Methods: GET, POST (both supported)
  - Purpose: Callback endpoints; log form data and return JSON (mock handling).
  - Dependencies: none external (logging only)
  - Runtime: default (nodejs)

- /api/payments/sslcommerz/initiate
  - Methods: POST
  - Purpose: Initiate SSLCommerz payment using SSLCZ_* envs; returns gateway page URL or not_configured.
  - Dependencies: SSLCommerz, env SSLCZ_* and APP_BASE_URL
  - Runtime: default (nodejs)

- /api/payments/sslcommerz/ipn
  - Methods: POST
  - Purpose: IPN handler; appends records to .data/transactions.json; returns { status: "received" }.
  - Dependencies: Node fs/path
  - Runtime: default (nodejs)

- /api/user/credits
  - Directory exists with:
    - /api/user/credits/route.ts — not listed in tree; credits handlers likely exist; in Navbar fetches /api/user/credits
    - /api/user/credits/use/route.ts — present (content not retrieved fully)
  - Purpose: Get and consume user credits via Supabase RPC use_one_credit
  - Dependencies: Supabase
  - Runtime: default (nodejs)

- /api/template
  - Methods: route.ts present; content not inspected
  - Purpose: Template generation or proxy helper (assumed)
  - Dependencies: unknown
  - Runtime: default (nodejs)

[4] UI PAGES (src/app)
Note: Pages marked "use client" are client components.

- /app/page.tsx — Landing page ("AI Product Studio" hero, feature cards, CTA)
  - Client: "use client"
  - APIs called: none directly; links to /generator, /templates, /models
  - Key components: Next Link; basic Tailwind UI

- /app/tryon/page.tsx — Virtual Try-On page
  - Client: "use client"
  - APIs called: /api/generator (upload product + start prediction), /api/generator?id=... (poll)
  - Key components: local UI; fetches Supabase catalog models via getClientSupabase

- /app/generator/page.tsx — Alternate try-on generator UI
  - Client: "use client"
  - APIs called: /api/generator POST + GET (same as above)
  - Key components: local UI; static model lists

- /app/test-prompts/page.tsx — Product ad generator (developer test UI)
  - Client: "use client"
  - APIs called: /api/upload (Cloudinary), /api/test-generate (Gemini to generate images)
  - Key components: forms and simple grid display

- /app/test-generate/page.tsx — Present (content not read)
  - Likely developer test, possibly calls /api/test-generate
  - Client status: likely "use client"

- /app/templates/page.tsx — Templates browser
  - Likely calls /api/templates
  - Client status: not inspected

- /app/models/page.tsx — Models browser
  - Likely calls /api/models
  - Client status: not inspected

- /app/admin/layout.tsx — Admin shell
  - Server component; performs Supabase role check, uses AdminNav
  - APIs called: Supabase server client

- /app/admin/page.tsx — Redirect to /admin/dashboard

- /app/admin/dashboard/page.tsx — Admin dashboard
  - Client: "use client"
  - APIs called: none (mock data)
  - Components: Framer Motion, card grids

- /app/admin/{images,templates,payments,settings,users}/page.tsx — stubs/placeholders
  - Client status: not inspected; likely server components returning basic markup

- /app/signin/page.tsx — Sign-in page
  - Client: "use client"
  - APIs called: Supabase via SignInForm (client)
  - Components: Motion, fadeUp, SignInForm

- /app/signup/page.tsx — Signup page (content not inspected)

- /app/dashboard/page.tsx — User dashboard (content not inspected)
  - Middleware gates /dashboard behind auth when Supabase configured

- /app/{about,ai-tool,pricing,privacy,result,select,terms,upload}/page.tsx — Additional pages
  - Client status: varied; not all inspected
  - APIs: generally none directly

- /app/components/page.tsx — component showcase

- /app/layout.tsx — Root layout
  - Providers: ThemeProvider, AuthProvider, MotionProvider
  - Components: Navbar, Footer, BottomNav, PageTransition

[5] COMPONENTS (src/components)
- layout/navbar.tsx — Top navigation bar; shows credits when authenticated; mobile drawer; uses Button and Supabase client
- layout/footer.tsx — Footer section (content not inspected)
- layout/bottom-nav.tsx — Mobile bottom navigation (content not inspected)
- layout/left-sidebar.tsx, layout/sidebar.tsx — Layout scaffolding
- ui/button.tsx — shadcn-style Button (cva variants: default, outline, ghost; sizes)
- ui/search-bar.tsx — Search bar component (content not inspected)
- ModeToggle.tsx — Theme mode switcher (content not inspected)
- ModelPicker.tsx — Model selection UI (content not inspected)
- ModelsList.tsx — Models listing component (content not inspected)
- TemplatePicker.tsx — Template selection UI (content not inspected)
- gradient-carousel.tsx — Visual carousel (content not inspected)
- theme-provider.tsx — Theme context
- motion-provider.tsx — MotionConfig with prefers-reduced-motion handling
- page-transition.tsx — Page transition wrapper (Framer Motion)

[6] LIBRARY FILES (src/lib)
- AuthProvider.tsx — Provides auth context/provider for app
- cloudinary.ts — Safe client/server helpers configured via NEXT_PUBLIC_CLOUDINARY_*; hasCloudinary()
- config.ts — Reads MODE (mock/live), PLAN, ASSET_MANIFEST_URL, Supabase URL/key; computes HAS_SUPABASE
- credits.ts — Credit/plan helpers (not fully inspected)
- gemini.ts — Server-safe GoogleGenerativeAI client; exports genAI, modelName, runtime="nodejs"; generateAdVariants()
- store.ts — Client-side store (not inspected)
- supabase-server.ts — SSR Supabase client using @supabase/ssr cookies adapter
- supabase-client.ts, supabase-browser.ts — Client-side Supabase usage patterns
- supabase.ts, supabaseClient.ts — Alternate/legacy clients
- utils.ts — cn (clsx+twMerge); framer-motion variants; asset manifest overrides; demo image retrieval; localStorage helpers for selected model/template

[7] DATABASE / SUPABASE
- Supabase schema files:
  - profiles: id(uuid, PK, references auth.users), display_name, plan (default 'free'), credits (default 5), created_at
  - assets: id(uuid PK), user_id(uuid FK), kind(text 'tryon'|'template'), src_urls(jsonb), copy(jsonb), created_at
  - catalog_models: id(text PK), name, gender, thumb_url, styles(jsonb)
  - catalog_templates: id(text PK), name, category, ref_url, thumb
  - images (optional): id(uuid PK), user_id, url, model_id, template_id, created_at
- RLS policies:
  - profiles: read/update own row
  - assets: read/insert/delete own rows
  - images: read/insert/delete own rows
  - catalog_*: public read
- RPC:
  - public.use_one_credit(p_user_id uuid) — decrements credits atomically, returns { ok, remaining }
- Seed:
  - Example models (model_alex, model_mia) and templates (tpl_summer, tpl_winter) with placeholders

[8] CONFIG & SETUP FILES
- next.config.mjs:
  - reactStrictMode=true, experimental.typedRoutes=true
  - images domains: res.cloudinary.com, placehold.co, via.placeholder.com, replicate.delivery
  - remotePatterns includes Supabase storage public path
  - eslint.ignoreDuringBuilds=true
- tailwind.config.ts:
  - darkMode "class"
  - content globs for app/components/lib
  - theme.extend: colors (base/surface/card/accent/text/border), gradients, shadows, radii, font sizes, backdropBlur
  - plugins: tailwindcss-animate
- postcss.config.js:
  - plugins: tailwindcss, autoprefixer
- tsconfig.json:
  - strict, target ES2022, bundler resolution, jsx preserve
  - paths alias @/* → ./src/*
- vercel.json:
  - framework nextjs; buildCommand npm run build; output .next
  - Env: NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME, NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET
- .env.example:
  - MODE/PLAN, APP_BASE_URL
  - Supabase public URL/key
  - Cloudinary public and optional signed keys
  - GEMINI_API_KEY, REPLICATE_API_TOKEN/REPLICATE_MODEL_VERSION
  - HF_TOKEN/HF_TRYON_MODEL
  - SSLCommerz keys (SSLCZ_STORE_ID/PASSWD, SSLCZ_MODE, SSLC_SANDBOX)

[9] ERRORS OR TODO MARKERS
- TODO/FIXME markers: none found via keyword scan
- throw new Error: multiple guarded error throws in tryon/provider.ts for Replicate/HF/Cloudinary upload failures
- console.error occurrences (logging errors):
  - src/app/api/generator/route.ts — logs missing REPLICATE_API_TOKEN and unexpected errors
  - src/app/api/templates/route.ts — logs Supabase errors and unexpected errors
  - src/app/api/models/route.ts — logs Supabase errors and unexpected errors
  - src/app/api/tryon/route.ts — logs Replicate interaction failures during prediction
  - src/app/api/test-generate/route.ts — logs Cloudinary upload errors
  - SSLCommerz callbacks — log received data
  - Note: exact line numbers not included in this report; logs observed during inspection

[10] SUMMARY & RECOMMENDATIONS
- Total file count by type (approximate):
  - .tsx: ~40
  - .ts: ~30
  - .json: ~7
  - .css: 1
  - .mjs: 1
  - .js: 1
  - .sql: 4
  - .svg: ~18
  - .md: 1
  - .yml: 1
- Missing/empty files:
  - /src/app/api/template/route.ts present but not inspected; ensure implementation aligns with templates flow if used
  - /src/app/api/user/credits/route.ts referenced by UI (Navbar fetch) but only "use" sub-route shown in tree; verify existence of /api/user/credits base route
- Unused imports (spot-check):
  - Not exhaustively detected; code generally references imported modules. A targeted lint run would identify any unused imports.

Recommendations:
- Explicitly set runtime per API route:
  - Many routes rely on Node.js APIs (fs, crypto, fetch to external APIs). For consistency and edge/runtime clarity, consider adding export const runtime = 'nodejs' to routes that are not edge-compatible, similar to /api/tryon.
- Consolidate Replicate version env naming:
  - /api/generator uses REPLICATE_IDM_VTON_VERSION while provider.ts expects REPLICATE_MODEL_VERSION. Align on a single env key to avoid confusion.
- Cloudinary configuration:
  - Ensure NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME and NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET are set in all environments (vercel.json sets public values). For server-side signed uploads, add CLOUDINARY_API_KEY/SECRET and a dedicated server module if needed.
- Supabase credits endpoints:
  - Verify /api/user/credits base route exists alongside /api/user/credits/use; Navbar fetches /api/user/credits for current balance.
- SSLCommerz handlers:
  - Production flows typically validate signatures and redirect users to a status page post-payment. Current IPN stores transactions in .data without signature verification; add hash verification and user-facing redirects if going live.
- Asset manifest:
  - ASSET_MANIFEST_URL support exists. Document manifest hosting/deployment and caching strategy for production (stale-while-revalidate) if frequently read.
- Middleware:
  - Rate limit and optional API key gating are in place for /api/*. Document expected API_KEYS usage and recommended per-user keys if exposing public APIs.
- Testing and linting:
  - CI runs build only. Consider adding typecheck and lint steps to CI for earlier feedback.

End of report.